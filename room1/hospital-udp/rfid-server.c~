/*
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This file is part of the Contiki operating system.
 *
 */

#include "contiki.h"
#include "contiki-lib.h"
#include "contiki-net.h"
#include "net/ip/uip.h"
#include "net/rpl/rpl.h"
#include "node-id.h"

#include "net/netstack.h"
#include "dev/button-sensor.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <time.h>

#define DEBUG DEBUG_PRINT
#include "net/ip/uip-debug.h"

#define UIP_IP_BUF   ((struct uip_ip_hdr *)&uip_buf[UIP_LLH_LEN])
#define UIP_UDP_BUF   ((struct uip_udp_hdr *)&uip_buf[UIP_LLH_LEN + UIP_IPH_LEN])
#define UDP_RFID_PORT	5678
#define UDP_CLIENT_PORT     9000

#define UDP_EXAMPLE_ID  190
#define MAX_PAYLOAD_LEN		50
#include "../challenge_response.h"

struct ll {
   struct ll *next;
   struct ll *prev;
   char nonce[6];
};

struct ll *nhead = NULL;

static struct uip_udp_conn *server_conn;

PROCESS(udp_server_process, "UDP server process");
AUTOSTART_PROCESSES(&udp_server_process);

static int
isRespCorrect(char cstr[6]) {
  struct ll *curr = nhead;
  struct ll *tmp;
  int i;
  while(curr != NULL) {
    i = -1;
    while(cstr[++i] != '\0' && curr->nonce[i] != '\0') {
      if(curr->nonce[i] != cstr[i]) {
        break;
      }
    }
    if(cstr[i] == '\0' && curr->nonce[i] == '\0') {
      tmp = curr;
      if(curr->prev != NULL) {
        curr->prev->next = curr->next;
      }
      if(curr->next != NULL) {
        curr->next->prev = curr->prev;
      }
      free(tmp);
      return 1;
    }
    curr = curr->next;
  }
  return 0;
}

static void
saveResp(char cstr[6]) {
  struct ll *curr;
  int i = -1;
  if(nhead == NULL) {
    nhead = (struct ll*)malloc(sizeof(struct ll));
    nhead->next = NULL;
    nhead->prev = NULL;
    curr=nhead;
  } else {
    curr = nhead;
    while(curr->next != NULL) {
      curr = curr->next;
    }
    curr->next = (struct ll*)malloc(sizeof(struct ll));
    curr->next->prev = curr;
    curr = curr->next;
    curr->next = NULL;
  }
  while(cstr[++i] != '\0') {
    curr->nonce[i] = cstr[i];
  }
  curr->nonce[i] = '\0';
}

/*---------------------------------------------------------------------------*/
static void
tcpip_handler(void)
{
  char *appdata;
  char non[6], sdata[50], ndata[50], rfid[3], temp[4], tmp[50], resStr[6], dat[50], hash[50];
  int i, ind, j, k, x=0, y=0;
  long res=1;
  sprintf(rfid, "%d", node_id);
  if(uip_newdata()) {
    appdata = (char *)uip_appdata;
    appdata[uip_datalen()] = '\0';
    switch(appdata[0]) {
    	case 'n':
            strcpy(ndata, "");
	    for(i = 0; i < 4; i++) {
	       ind = abs(rand() % 49);
               sprintf(temp, "%02d", ind);
               if (i != 3)
                  strcat(temp, ",");
               strcat(ndata, temp);
               res *= cr[ind]; 
	    }
            strcpy(tmp,"");
	    sprintf(tmp,"|%ld", gen_hash(ndata));
	    strcat(ndata, tmp);
            strcpy(tmp, "");
	    PRINTF("Sending reply %s \n", ndata);
            uip_ipaddr_copy(&server_conn->ripaddr, &UIP_IP_BUF->srcipaddr);
            uip_udp_packet_send(server_conn, ndata, sizeof(ndata));
            uip_create_unspecified(&server_conn->ripaddr);
            strcpy(resStr,"");
            strcpy(tmp,"");
	    sprintf(tmp, "%ld", res);
            strncpy(resStr, tmp, 5);
            resStr[5] = '\0';
            strcpy(tmp, resStr);
            for(i = 0; i < 5; i++) {
              resStr[i] = tmp[ord[i]];
            }
            saveResp(resStr);
            break;
	default:
		for(x=0; appdata[x] != '|'; x++){
		    dat[x] = appdata[x];
		}
		x++;
		for(; appdata[x] != '\0'; x++, y++){
		    hash[y] = appdata[x];
		}
		hash[y] = '\0';
                if(check_hash(gen_hash(dat), hash)) {
			i = -1;
			while(appdata[++i] != ',') {
			  non[i] = appdata[i];
			}
			non[i] = '\0';
		        if(isRespCorrect(non)) {
			    printf("Request to send data ");
			    sdata[0] = 'd';
		            res = 1;
		            for (j = 0; j < 4; j++) {
		               ind = 0;
		               k=10;  
		               while(appdata[++i] != ',' && appdata[i] != '\0') {
		                  ind += (appdata[i] - '0') * k;
		                  k /= 10;
		               }
		               res *= cr[ind];
		            }
		            strcpy(tmp, "");
		            strcpy(resStr, "");
		            sprintf(tmp, "%ld", res);
			    strncpy(resStr, tmp, 5);
		            resStr[5] = '\0';
			    strcpy(tmp, resStr);
			    for(j = 0; j < 5; j++) {
			      sdata[j+1] = tmp[ord[j]];
			    }   
			    sdata[j+1] = ',';
		            i = j+1;
			    j = strlen(rfid);
			    k = 0;
			    while(j-- > 0) {
				sdata[++i] = encrypt(rfid[k++]);
			    }	
			    sdata[i+1] = '\0';
			    strcpy(tmp, "");
			    sprintf(tmp, "|%ld", gen_hash(sdata));
			    strcat(sdata, tmp);
			    strcpy(tmp, "");
			    printf("%s\n", sdata);
			    uip_ipaddr_copy(&server_conn->ripaddr, &UIP_IP_BUF->srcipaddr);
			    uip_udp_packet_send(server_conn, sdata, sizeof(sdata));
			    uip_create_unspecified(&server_conn->ripaddr);
			} else {
				printf("CHALLENGE RESPONSE FAILED\n");
			}
		} else {
			printf("Integrity check failed!\n");		
		}		
    }
    
  }
}

/*---------------------------------------------------------------------------*/
static void
print_local_addresses(void)
{
  int i;
  uint8_t state;

  PRINTF("Server IPv6 addresses: ");
  for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
    state = uip_ds6_if.addr_list[i].state;
    if(state == ADDR_TENTATIVE || state == ADDR_PREFERRED) {
      PRINT6ADDR(&uip_ds6_if.addr_list[i].ipaddr);
      PRINTF("\n");
      /* hack to make address "final" */
      if (state == ADDR_TENTATIVE) {
	uip_ds6_if.addr_list[i].state = ADDR_PREFERRED;
      }
    }
  }
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(udp_server_process, ev, data)
{
  uip_ipaddr_t ipaddr;

  PROCESS_BEGIN();

  PROCESS_PAUSE();

  SENSORS_ACTIVATE(button_sensor);

  PRINTF("UDP server started\n");

#if UIP_CONF_ROUTER
/* The choice of server address determines its 6LoPAN header compression.
 * Obviously the choice made here must also be selected in udp-client.c.
 *
 * For correct Wireshark decoding using a sniffer, add the /64 prefix to the 6LowPAN protocol preferences,
 * e.g. set Context 0 to aaaa::.  At present Wireshark copies Context/128 and then overwrites it.
 * (Setting Context 0 to aaaa::1111:2222:3333:4444 will report a 16 bit compressed address of aaaa::1111:22ff:fe33:xxxx)
 * Note Wireshark's IPCMV6 checksum verification depends on the correct uncompressed addresses.
 */
  uip_ip6addr(&ipaddr, 0xaaaa, 0, 0, 0, 0, 0, 0, 0);
  uip_ds6_set_addr_iid(&ipaddr, &uip_lladdr);
  uip_ds6_addr_add(&ipaddr, 0, ADDR_AUTOCONF);
#endif /* UIP_CONF_ROUTER */
  
  print_local_addresses();

  /* The data sink runs with a 100% duty cycle in order to ensure high 
     packet reception rates. */
  NETSTACK_MAC.off(1);

  server_conn = udp_new(NULL, UIP_HTONS(UDP_CLIENT_PORT), NULL);
  if(server_conn == NULL) {
    PRINTF("No UDP connection available, exiting the process!\n");
    PROCESS_EXIT();
  }
  udp_bind(server_conn, UIP_HTONS(UDP_RFID_PORT));

  PRINTF("Created a server connection with remote address ");
  PRINT6ADDR(&server_conn->ripaddr);
  PRINTF(" local/remote port %u/%u\n", UIP_HTONS(server_conn->lport),
         UIP_HTONS(server_conn->rport));

  while(1) {
    PROCESS_YIELD();
    if(ev == tcpip_event) {
      tcpip_handler();
    } else if (ev == sensors_event && data == &button_sensor) {
      PRINTF("Initiaing global repair\n");
      rpl_repair_root(RPL_DEFAULT_INSTANCE);
    }
  }

  PROCESS_END();
}
/*---------------------------------------------------------------------------*/
