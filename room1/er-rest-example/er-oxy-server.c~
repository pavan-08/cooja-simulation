#include "utils.h"
/*
 * Resources to be activated need to be imported through the extern keyword.
 * The build system automatically compiles the resources in the corresponding sub-directory.
 */
extern resource_t
  res_chunks,
  res_separate,
  res_event;

static struct uip_udp_conn *client_conn;
static uip_ipaddr_t server_ipaddr;


static void res_get_handler(void *request, void *response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset);

RESOURCE(res_oxy,
         "title=\"Oxygen sensor(JSON, Plain TEXT)\";rt=\"Reporter\"",
         res_get_handler,
         NULL,
         NULL,
         NULL);

static void
res_get_handler(void *request, void *response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset) {

  unsigned int accept = -1;
  REST.get_header_accept(request, &accept);
  if(accept == -1 || accept == REST.type.TEXT_PLAIN) {
    REST.set_header_content_type(response, REST.type.TEXT_PLAIN);
    snprintf((char *)buffer, REST_MAX_CHUNK_SIZE, "37;%s",rfid);

    REST.set_response_payload(response, (uint8_t *)buffer, strlen((char *)buffer));
  } else if(accept == REST.type.APPLICATION_JSON) {
    REST.set_header_content_type(response, REST.type.APPLICATION_JSON);
    snprintf((char *)buffer, REST_MAX_CHUNK_SIZE, "{'oxygen': 97, 'rfid': '%s'}", rfid);

    REST.set_response_payload(response, buffer, strlen((char *)buffer));
  } else {
    REST.set_response_status(response, REST.status.NOT_ACCEPTABLE);
    const char *msg = "Supporting text and json";
    REST.set_response_payload(response, msg, strlen(msg));
  }
}


/*---------------------------------------------------------------------------*/
static void
send_cnonce(char *cstr)
{
  //static int seq_id;
  char buf[MAX_PAYLOAD_LEN];
  sprintf(buf, "%s", cstr);
  uip_udp_packet_sendto(client_conn, buf, strlen(buf),
                        &server_ipaddr, UIP_HTONS(UDP_RFID_PORT));
}

/*---------------------------------------------------------------------------*/
static void
send_packet(void *ptr)
{
  //static int seq_id;
  char buf[MAX_PAYLOAD_LEN];

  printf("Sending request for nonce\n");
  sprintf(buf, "nSend nonce");
  uip_udp_packet_sendto(client_conn, buf, strlen(buf),
                        &server_ipaddr, UIP_HTONS(UDP_RFID_PORT));
}
/*---------------------------------------------------------------------------*/



PROCESS(er_example_server, "Erbium Example Server");
AUTOSTART_PROCESSES(&er_example_server);

PROCESS_THREAD(er_example_server, ev, data)
{
  static struct etimer periodic;
  static struct ctimer backoff_timer;
  PROCESS_BEGIN();

  PROCESS_PAUSE();

  int v1 = 0x7400, v2 = 0x0000, v3 = 0x0000;
  int nid = node_id - 2;
  int rfid_node_id = nid/7;
  rfid_node_id *= 7;
  rfid_node_id += 2;
  v1 += rfid_node_id;
  v2 += rfid_node_id;
  v3 += (rfid_node_id * 0x100) + rfid_node_id;
  uip_ip6addr(&server_ipaddr, 0xaaaa, 0, 0, 0, 0x0212, v1, v2, v3);
  client_conn = udp_new(NULL, UIP_HTONS(UDP_RFID_PORT), NULL); 
  if(client_conn == NULL) {
    printf("No UDP connection available, exiting the process!\n");
    PROCESS_EXIT();
  }
  udp_bind(client_conn, UIP_HTONS(UDP_PORT)); 
  
  // Initialize the REST engine. 
  rest_init_engine();

  rest_activate_resource(&res_oxy, "sensor/oxygen");

  etimer_set(&periodic, SEND_INTERVAL);
  /* Define application-specific events here. */
  while(1) {
    PROCESS_WAIT_EVENT();
    if(ev == tcpip_event) {
      tcpip_handler();
    }
    if(etimer_expired(&periodic) && !data_received) {
      etimer_reset(&periodic);
      ctimer_set(&backoff_timer, SEND_TIME, send_packet, NULL);
    }
  }                             /* while (1) */

  PROCESS_END();
}

